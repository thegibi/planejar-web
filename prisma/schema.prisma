datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma-client"
}

model Client {
  id      Int      @id @default(autoincrement())
  name    String
  phone   String?
  email   String?  @unique
  farms   Farm[]
}

model Farm {
  id                 Int      @id @default(autoincrement())
  name               String
  location           String
  area               Float
  sprayTank          String?
  fertilizerSpreader String?
  
  owner              Client   @relation(fields: [ownerId], references: [id])
  ownerId            Int
  
  plots              Plot[]
  inputs             Input[] 
  plantings          Planting[]
  applications       Application[]
}

model Input {
  id               Int      @id @default(autoincrement())
  class            String
  commercialBrand  String
  activeIngredient String
  unitOfMeasure   String

  farms            Farm[]
}

model Plot {
  id     Int    @id @default(autoincrement())
  name   String
  area   Float
  geometry String?
  
  farm   Farm   @relation(fields: [farmId], references: [id])
  farmId Int
  
  plantings Planting[]
}

model Planting {
  id              Int      @id @default(autoincrement())
  crop            String
  varieties       String[]
  population      Int
  plantingDate    DateTime


  farm            Farm     @relation(fields: [farmId], references: [id])
  farmId          Int
  
  plots           Plot[] 
  applications    Application[] 
}

model Variety {
  id     Int    @id @default(autoincrement())
  name   String @unique
  cycle  Int  
}

model Application {
  id              Int      @id @default(autoincrement())
  applicationDate DateTime
  plotIds         Int[]   
  inputIds        Int[]   
  observations    String? 
  
  farm            Farm     @relation(fields: [farmId], references: [id])
  farmId          Int
  
  planting        Planting @relation(fields: [plantingId], references: [id])
  plantingId      Int
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   
  accounts      Account[]
  sessions      Session[]
 
  @@map(name: "users")
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map(name: "sessions")
}
 
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token])
  @@map(name: "verificationtokens")
}
