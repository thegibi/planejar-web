const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function diagnoseProduction() {
  console.log('üîç DIAGN√ìSTICO DE PRODU√á√ÉO - PLANEJAR.APP');
  console.log('='.repeat(60));

  // 1. Verificar vari√°veis de ambiente
  console.log('\n1Ô∏è‚É£ VARI√ÅVEIS DE AMBIENTE:');
  console.log('NODE_ENV:', process.env.NODE_ENV || '‚ùå N√ÉO DEFINIDO');
  console.log('NEXTAUTH_URL:', process.env.NEXTAUTH_URL || '‚ùå N√ÉO DEFINIDO');
  console.log('NEXTAUTH_SECRET:', process.env.NEXTAUTH_SECRET ? '‚úÖ DEFINIDO' : '‚ùå N√ÉO DEFINIDO');
  console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ DEFINIDO' : '‚ùå N√ÉO DEFINIDO');

  // 2. Verificar conex√£o com banco
  console.log('\n2Ô∏è‚É£ CONEX√ÉO COM BANCO DE DADOS:');
  try {
    await prisma.$connect();
    console.log('‚úÖ Conex√£o com banco: OK');

    // Contar usu√°rios
    const userCount = await prisma.user.count();
    console.log(`üìä Total de usu√°rios: ${userCount}`);

  } catch (error) {
    console.log('‚ùå Erro na conex√£o:', error.message);
  }

  // 3. Verificar usu√°rio admin
  console.log('\n3Ô∏è‚É£ USU√ÅRIO ADMINISTRADOR:');
  try {
    const admin = await prisma.user.findUnique({
      where: { email: 'rafael.maciel@planejar.app' },
      select: { id: true, name: true, email: true }
    });

    if (admin) {
      console.log('‚úÖ Usu√°rio admin encontrado');
      console.log('üë§ Nome:', admin.name);
      console.log('üìß Email:', admin.email);
      console.log('üÜî ID:', admin.id);
    } else {
      console.log('‚ùå Usu√°rio admin N√ÉO encontrado');
      console.log('üí° Execute: npm run seed:admin');
    }
  } catch (error) {
    console.log('‚ùå Erro ao verificar admin:', error.message);
  }

  // 4. Verificar configura√ß√µes cr√≠ticas
  console.log('\n4Ô∏è‚É£ CONFIGURA√á√ïES CR√çTICAS:');

  // NextAuth Secret
  const secret = process.env.NEXTAUTH_SECRET;
  if (!secret) {
    console.log('‚ùå NEXTAUTH_SECRET n√£o definido');
  } else if (secret.length < 32) {
    console.log('‚ö†Ô∏è  NEXTAUTH_SECRET muito curto (m√≠nimo 32 caracteres)');
  } else {
    console.log('‚úÖ NEXTAUTH_SECRET: OK');
  }

  // NextAuth URL
  const authUrl = process.env.NEXTAUTH_URL;
  if (authUrl === 'https://www.planejar.app') {
    console.log('‚úÖ NEXTAUTH_URL: OK');
  } else {
    console.log('‚ùå NEXTAUTH_URL incorreto ou n√£o definido');
    console.log('üí° Deve ser: https://www.planejar.app');
  }

  // 5. Recomenda√ß√µes
  console.log('\n5Ô∏è‚É£ RECOMENDA√á√ïES:');

  if (process.env.NODE_ENV !== 'production') {
    console.log('‚ö†Ô∏è  Definir NODE_ENV=production');
  }

  if (!process.env.NEXTAUTH_URL) {
    console.log('‚ö†Ô∏è  Definir NEXTAUTH_URL=https://www.planejar.app');
  }

  if (!process.env.NEXTAUTH_SECRET || process.env.NEXTAUTH_SECRET.length < 32) {
    console.log('‚ö†Ô∏è  Gerar NEXTAUTH_SECRET forte (32+ caracteres)');
  }

  console.log('\n' + '='.repeat(60));
  console.log('üîó Documenta√ß√£o completa: PRODUCTION.md');

  await prisma.$disconnect();
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  diagnoseProduction().catch(console.error);
}

module.exports = { diagnoseProduction };